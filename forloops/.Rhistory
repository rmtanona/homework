mpg%>%
filter( manufacturer == "Dodge")%>%
filter(drv == "4wd") %>%
print(n = 20)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
mpg
view(mpg)
mpg%>%
filter( manufacturer == "dodge")%>%
filter(drv == "4wd") %>%
print(n = 20)
mpg%>%
filter(manufacturer == "dodge")%>%
filter(drv == "4wd") %>%
print(n = 20)
mpg%>%
filter(manufacturer == "dodge")%>%
filter(drv == "4wd")
mpg%>%
filter(manufacturer == "dodge")%>%
filter(drv == "4")
mpg%>%
filter(manufacturer == "dodge")%>%
filter(model == "durango")%>%
filter(drv == "4")
mpg%>%
filter(manufacturer == "dodge")%>%
filter(drv == "4")
mpg%>%
filter(manufacturer == "dodge")%>%
filter(model == "durango 4wd")
mpg%>%
arrange(asc(cty))%>%
print(n=30)
mpg%>%
arrange(ascending(cty))%>%
print(n=30)
mpg%>%
select(cty)
arrange(cty)%>%
print(n=30)
mpg%>%
select(cty)%>%
arrange(cty)%>%
print(n=30)
mpg%>%
arrange(cty)%>%
print(n=30)
mpg%>%
mutate(mpg, "difference" = (hwy - cty))%>%
select(manufacturer, model, cty, hwy, difference)%>%
arrange(desc(cty))%>%
print(n=15)
mpg%>%
mutate(mpg, "difference" = (hwy - cty))%>%
select(manufacturer, model, cty, hwy, difference)%>%
print(n=15)
mpg%>%
mutate(mpg, "difference" = (hwy - cty))%>%
select(manufacturer, model, cty, hwy, difference)%>%
filter(manufacturer == "ford")%>%
filter(model == "mustang")%>%
print(n=15)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyverse)
library(ggplot)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyverse)
library(ggplot)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyverse)
library(ggplot2)
midwest
midwest
summary(midwest)
midwest%>%
filter(state == "Ohio")
midwest%>%
filter(state == Ohio)
?midwest
head(midwest)
midwest%>%
filter(state == "ohio")
midwest%>%
filter(state == "OH")
midwest%>%
select(PID, county, state, poptotal, popwhite, percwhite)%>%
filter(state == "IN")%>%
filter(50000 < popwhite < 90000)
midwest%>%
select(PID, county, state, poptotal, popwhite, percwhite)%>%
filter(state == "IN")%>%
filter(popwhite < 90000)%>%
filter(popwhite > 50000)
midwest%>%
select(state, county, poptotal, popamerindian, percamerindan)%>%
filter(state == "IN")%>%
arrange(desc(popamerindian))%>%
print(n=20)
midwest%>%
select(county, state, poppovertyknown, percprof)%>%
filter(state == "MI")%>%
filter(poppovertyknown > 10000)%>%
filter(percprof > 10)
midwest %>%
group_by(state) %>%
summarize(mean_ = mean(poppovertyknown)
midwest %>%
group_by(state) %>%
summarize(mean_poppoverty = mean(poppovertyknown)
midwest %>%
group_by(state)%>%
summarize(mean_poppoverty = mean(poppovertyknown)
midwest%>%
group_by(state)%>%
summarize(mean_poppoverty = mean(poppovertyknown)
midwest%>%
group_by(state)%>%
summary(mean_poppoverty = mean(poppovertyknown)
midwest%>%
group_by(state)%>%
mutate(mean_poppoverty = mean(poppovertyknown)
midwest%>%
group_by(state)%>%
mutate(mean_poppoverty = mean(poppovertyknown)%>%
summarize(mean_poppoverty)
midwest%>%
group_by(state)%>%
mutate("mean_poppoverty" = mean(poppovertyknown)%>%
summarize(mean_poppoverty)
midwest%>%
mutate("mean_poppoverty" = mean(poppovertyknown)%>%
group_by(state)%>%
midwest%>%
select(state, poppovertyknown)%>%
group_by(state)%>%
mutate("mean_poppoverty" = mean(poppovertyknown)%>%
midwest%>%
select(state, poppovertyknown)%>%
group_by(state)%>%
mutate("mean_poppoverty" = mean(poppovertyknown)
midwest%>%
select(state, poppovertyknown)%>%
group_by(state)%>%
mutate("mean_poppoverty" = mean(poppovertyknown)
midwest%>%
select(state, poppovertyknown)%>%
group_by(state)%>%
mutate("mean_poppoverty" = mean(poppovertyknown)%>%
print(n=10)
midwest%>%
select(state, poppovertyknown)%>%
group_by(state)%>%
mutate("mean_poppoverty" = mean(poppovertyknown)%>%
select(state, mean_poppovertyknown)
print(n=10)
midwest%>%
select(state, poppovertyknown)%>%
group_by(state)%>%
mutate("mean_poppoverty" = mean(poppovertyknown)%>%
select(state, mean_poppovertyknown)%>%
print(n=10)
midwest%>%
group_by(state)%>%
mutate("mean_poppoverty" = mean(poppovertyknown)%>%
select(state, mean_poppovertyknown)%>%
print(n=10)
midwest%>%
group_by(state)%>%
mutate("mean_poppoverty" = mean(poppovertyknown)%>%
select(state, mean_poppovertyknown)%>%
print(n=10)
midwest %>%
midwest%>%
group_by(state) %>%
summarise(mean_poverty = mean(poverty, na.rm = TRUE))
midwest%>%
group_by(state) %>%
summarise(mean_poverty = mean(poppovertyknown, na.rm = TRUE))
ggplot(data=midwest) +
geom_point(mapping = aes(x=poptotal, y=poppovertyknown, color = state)) +
xlab("Total Population") +
ylab("Known Poverty Population") +
ggtitle("Poverty Population by Total Population") +
geom_smooth(method=lm, mapping=aes(x=displ,y=cty, color = drv))
ggplot(data=midwest) +
geom_point(mapping = aes(x=poptotal, y=poppovertyknown, color = state)) +
xlab("Total Population") +
ylab("Known Poverty Population") +
ggtitle("Poverty Population by Total Population") +
geom_smooth(method=lm, mapping=aes(x=poptotal,y=poppovertyknown))
ggplot(data=midwest) +
geom_point(mapping = aes(x=poptotal, y=poppovertyknown, color = state)) +
xlab("Total Population") +
ylab("Known Poverty Population") +
ggtitle("Poverty Population by Total Population")
ggplot(data=midwest) +
geom_point(mapping = aes(x=poptotal, y=poppovertyknown, color = state)) +
xlab("Total Population") +
ylab("Known Poverty Population") +
ggtitle("Poverty Population by Total Population")
ggplot(data = midwest)  +
geom_boxplot(mapping=aes(y=percadultpoverty, x=state))
ggplot(data = midwest)  +
geom_point(mapping = aes(x=percollege, y=percprof), color = "firebrick3" +
facet_wrap(~state) +
ylab("popdensity") +
geom_smooth(mapping=aes(x=percollege,y=percprof), color = "red")
ggplot(data = midwest)  +
geom_point(mapping = aes(x=percollege, y=percprof), color = "firebrick3") +
facet_wrap(~state) +
ylab("popdensity") +
geom_smooth(mapping=aes(x=percollege,y=percprof), color = "red")
ggplot(data = midwest)  +
geom_point(mapping = aes(x=percollege, y=percprof), color = "firebrick3") +
facet_wrap(~state) +
xlab("Percent College Educated") +
ylab("Percent with Professional Degree") +
ggtitle("College/Professional Work Scatter Plots") +
geom_smooth(mapping=aes(x=percollege,y=percprof), color = "red")
ggplot(data = midwest) +
geom_bar(mapping = aes(x = state, fill= state)
ggplot(data = midwest) +
geom_bar(mapping = aes(x = state, fill= state))
is_tibble(midwest)
midwest%>%
select(poptotal) -> midwestsubset
midwestsubset
midwest[[5]]
View(midwestsubset)
midwest[[5]]
midwest[["poptotal"]]
head(midwest[[5]])
head(midwest[["poptotal"]])
midwest%>%
group_by(state) %>%
summarise(mean_area = mean(area, na.rm = TRUE))
file.exists("~/.ssh/id_rsa.pub")
pkgvec <- c("usethis", "devtools", "roxygen2", "testthat", "knitr")
install.packages("pkgvec")
if (!requireNamespace(pkg, quietly = TRUE))
install.packages(pkg)
library(pkg, character.only = TRUE)
library(tidyverse)
library(testthat)
library(usethis)
library(dbplyr)
detach("package:dbplyr", unload = TRUE)
library(knitr)
pkgvec <- c("usethis", "devtools", "roxygen2", "testthat", "knitr", "covr")
for (pkg in pkgvec) {
if (!requireNamespace(pkg, quietly = TRUE))
install.packages(pkg)
library(pkg, character.only = TRUE)
}
pkgvec <- c("usethis", "devtools", "roxygen2", "testthat", "knitr")
for (pkg in pkgvec) {
if (!requireNamespace(pkg, quietly = TRUE))
install.packages(pkg)
library(pkg, character.only = TRUE)
}
getwd()
setwd("./Desktop/Afolder4package")
getwd()
list.files()
list.files(all.files = TRUE)
usethis::create_package(path = ".", rstudio = FALSE, open = FALSE)
list.files(all.files = TRUE)
file.show("DESCRIPTION")
file.show("NAMESPACE")
usethis::use_r(name = "power1")
list.files()
list.files()
list.files(all.files = TRUE)
getwd()
list.files(./R)
list.files("./R")
pwr1 <- function(x=2, y=3){
if (!is.numeric(x) | !is.numeric(y)){
return(cat("x=", x, "and y=", y, ". Both must be numeric. Please enter numeric values for both"))
}
return((x^2)^y)
}
pwr1()
devtools::check()
pwr1(-2, 0.5)
usethis::use_mit_license()
devtools::check()
file.show("DESCRIPTION")
devtools::check()
devtools::check()
devtools::check()
list.files("man")
list.files()
pwr2(c(2,2), c(3,5))
pwr2 <- function(x, y){
if (class(x) != "numeric" | class(y) != "numeric") {
stop("Check the class of your vectors both must be numeric")
}
else if (sum(is.na(x) | is.na(y)) !=0){
stop("There is at least one missing value in your vectors")
}
else if (length(x) %% length(y) !=0 | length(y) %% length(x) !=0 ) { warning(" The lengths are not equal")}
else if (length(x) == length(y) & sum(is.na(x) | is.na(y)) ==0 ){
df <- tibble::tibble(x, y)
return(dplyr::mutate(df, Power = pwr1(x,y)))
}  else { stop("Check your vectors!")
}
}
pwr2(c(2,2), c(3,5))
devtools::check()
usethis::use_package("dplyr")
usethis::use_package("tibble")
pwr2 <- function(x, y){
if (!is.numeric(x) | !is.numeric(y)) {
stop("Check the class of your vectors both must be numeric")
}
else if (sum(is.na(x) | is.na(y)) !=0){
stop("There is at least one missing value in your vectors")
}
else if (length(x) %% length(y) !=0 | length(y) %% length(x) !=0 ) { warning(" The lengths are not equal")}
else if (length(x) == length(y) & sum(is.na(x) | is.na(y)) ==0 ){
df <- tibble::tibble(x, y)
return(dplyr::mutate(df, Power = pwr1(x,y)))
}  else { stop("Check your vectors!")
}
}
devtools::check()
devtools::document()
list.files("man")
devtools::install()
help("pwr1")
help("pwr2")
help("pwr2")
devtools::install()
help("pwr2")
devtools::document()
list.files("man")
devtools::install()
help("pwr2")
list.files
list.files()
devtools::build_vignettes()
devtools::install(pkg = "Afolder4package", build_vignettes = TRUE)
list.files()
devtools::install(build_vignettes = TRUE)
list.files()
usethis::use_vignette()
usethis::use_vignette("Introduction")
list.files()
usethis::use_testthat()
list.files()
list.files("./tests/testthat/")
list.files("./tests")
file.show("./tests/testthat.R")
usethis::use_test("power1.R")
install.packages("DBI")
library("DBI")
open("app.R")
shiny::runApp('~/datascience')
runExample("hello_01")
runExample("01_hello")
runExample("04_mpg")
install.packages("babynames")
runApp('~/datascience')
getwd()
setwd("../../datascience")
getwd()
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp()
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
library(dplyr)
library(babynames)
babynames%>%
head()
babynames%>%
filter(name=="Jack")%>%
filter(sex=="M")%>%
filter(year =< 2017 | year >= 2000)
babynames%>%
filter(name=="Jack")%>%
filter(sex=="M")%>%
filter(year <= 2017 | year => 2000)
babynames%>%
filter(name=="Jack")%>%
filter(sex=="M")%>%
filter(year <= 2017)%>%
filter(year => 2000)
babynames%>%
filter(name=="Jack", sex=="M")%>%
filter(year < 2018)%>%
filter(year > 2000)
babynames%>%
filter(name=="Jack", sex=="M")%>%
filter(year < 2018)%>%
filter(year > 1999)%>%
select(year, n, prop)
babynames%>%
filter(name=="Jack", sex=="M")%>%
filter(year < 2018, year > 1999)%>%
select(year, n, prop)
babynames%>%
filter(name=="Jack", sex=="M")%>%
filter(year < 2011, year > 1999)%>%
select(year, n, prop)
babynames%>%
filter(name=="Jack", sex=="M")%>%
filter(year < 2011, year > 1999)%>%
select(year, n, prop)%>%
print()
ui <-
babynames%>%
filter(name=="Jack", sex=="M")%>%
filter(year %in% c(2000, 2010))%>%
select(year, n, prop)%>%
print()
ui <-
babynames%>%
filter(name=="Jack", sex=="M")%>%
filter(year %in% 2000:2010)%>%
select(year, n, prop)%>%
print()
runApp('shiny_app.R')
runApp('shiny_app.R')
getwd()
setwd("../homework/forloop")
getwd()
getwd()
col_means() <- function(df){
means <- lapply(df, function(x) mean(x, na.rm = TRUE))
# to my understanding, lapply is the best way to apply this function to each
#column of the data frame.
return(means)
}
install.packages("practice.R")
col_means() <- function(df){
means <- lapply(df, function(x) mean(x, na.rm = TRUE))
# to my understanding, lapply is the best way to apply this function to each
#column of the data frame.
return(means)
}
col_means <- function(df){
means <- lapply(df, function(x) mean(x, na.rm = TRUE))
# to my understanding, lapply is the best way to apply this function to each
#column of the data frame.
return(means)
}
install.packages("practice.R")
install.packages("practice.R")
getwd()
dataframe <- data.frame(
A = c(1, 2, 3, NA),
B = c(4, 5, NA, 6),
C = c(7, 8, 9, 10)
)
col_means(dataframe)
col_means(dataframe)
View(dataframe)
usethis::use_r(name = "practice")
usethis::use_r(name = "practice")
knitr::opts_knit$set(root.dir = "C:/Users/ronantanona/homework/forloops")
list.files(all.files = TRUE)
usethis::create_package(path = ".", rstudio = FALSE, open = FALSE)
getwd()
list.files(all.files = TRUE)
file.edit("DESCRIPTION")
usethis::use_r(name = "practice")
ls
getwd()
setwd("/Users/ronantanona/homework/forloops/R")
usethis::use_r(name = "practice")
col_means <- function(df){
means <- lapply(df, function(x) mean(x, na.rm = TRUE))
# to my understanding, lapply is the best way to apply this function to each
#column of the data frame.
return(means)
}
getwd()
setwd("/Users/ronantanona/homework/forloops")
getwd()
devtools::check()
list.files()
usethis::use_mit_license()
devtools::check()
list.files()
usethis::use_mit_license()
list.files()
file.show("DESCRIPTION")
use_mit_license()
library(usethis)
usethis::use_mit_license()
list.files()
devtools::check()
library(tools)
library(tidyverse)
usethis::use_mit_license()
list.files()
update.packages(checkBuilt = TRUE)
usethis::use_mit_license()
usethis::use_mit_license()
list.files()
